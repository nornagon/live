// Generated by CoffeeScript 1.4.0
(function() {
  var canvas, canvasDiv, cm, deltaForNumber, div, iframe, k, needsUpdate, old_ast_json, old_values_json, persistent, preamble, setNeedsUpdate, updateIframe, v, _ref, _ref1, _ref2;

  document.head.appendChild(document.createElement('style')).textContent = 'canvas { border: 1px solid black; position: fixed }\n.CodeMirror { -webkit-flex: 1; margin-left: 1em; height: 100%; }';

  div = document.body.appendChild(document.createElement('div'));

  _ref = {
    display: '-webkit-flex',
    webkitFlexFlow: 'row'
  };
  for (k in _ref) {
    v = _ref[k];
    div.style[k] = v;
  }

  canvasDiv = div.appendChild(document.createElement('div'));

  _ref1 = {
    width: '500px',
    height: '500px'
  };
  for (k in _ref1) {
    v = _ref1[k];
    canvasDiv.style[k] = v;
  }

  canvas = canvasDiv.appendChild(document.createElement('canvas'));

  canvas.width = canvas.height = 500;

  iframe = document.body.appendChild(document.createElement('iframe'));

  iframe.style.display = 'none';

  cm = CodeMirror(div, {
    flattenSpans: false,
    lineWrapping: true
  });

  cm.on('renderLine', function(cm, line, el) {
    var nums, tok, _fn, _i, _len;
    nums = el.querySelectorAll('.token');
    line = cm.getLineNumber(line);
    _fn = function(tok) {
      var begin, end, m, pr;
      begin = 0;
      pr = tok;
      while (pr = pr.previousSibling) {
        begin += pr.textContent.length;
      }
      end = begin + tok.textContent.length;
      m = cm.findMarksAt({
        line: line,
        ch: begin
      })[0];
      if (!m) {
        return;
      }
      tok.onmousedown = function(e) {
        var changed, delta, initial_x, originalValue, overlay, _ref2;
        initial_x = e.pageX;
        cm.setOption('readOnly', 'nocursor');
        cm.scrubbing = true;
        originalValue = Number(tok.textContent);
        delta = deltaForNumber(originalValue);
        cm.doc.setSelection({
          line: line,
          ch: begin
        }, {
          line: line,
          ch: end
        });
        e.stopPropagation();
        e.preventDefault();
        overlay = document.createElement('div');
        _ref2 = {
          position: 'absolute',
          left: 0,
          top: 0,
          width: '100%',
          height: '100%',
          cursor: 'ew-resize',
          zIndex: 10000
        };
        for (k in _ref2) {
          v = _ref2[k];
          overlay.style[k] = v;
        }
        document.body.appendChild(overlay);
        changed = false;
        window.onmousemove = function(e) {
          var d;
          d = Number((Math.round((e.pageX - initial_x) / 2) * delta + originalValue).toFixed(5));
          if (changed) {
            cm.doc.undo();
          }
          cm.doc.replaceSelection('' + d);
          changed = true;
          iframe.contentWindow.$values[m.value_id] = d;
          e.stopPropagation();
          return e.preventDefault();
        };
        return window.onmouseup = window.blur = function() {
          window.onmousemove = void 0;
          overlay.remove();
          cm.setOption('readOnly', false);
          cm.focus();
          cm.scrubbing = false;
          return window.localStorage['code'] = cm.doc.getValue();
        };
      };
      tok.style.borderBottom = '1px dashed blue';
      return tok.style.cursor = 'ew-resize';
    };
    for (_i = 0, _len = nums.length; _i < _len; _i++) {
      tok = nums[_i];
      _fn(tok);
    }
  });

  preamble = '(function () {\n\nvar listeners = {}\nwindow.on = function on(ev, fn) {\n  var ref = listeners[ev];\n  (ref ? ref : listeners[ev] = []).push(fn);\n}\nfunction emit(ev) {\n  var fs = listeners[ev], args = Array.prototype.slice.call(arguments, 1);\n  if (!fs) return;\n  for (var i = 0; i < fs.length; i++) fs[i].apply(null, args);\n}\n\ncanvas.addEventListener(\'mousemove\', function(e) {\n  mouse.x = e.offsetX;\n  mouse.y = e.offsetY;\n  emit(\'mousemove\', mouse)\n});\ncanvas.addEventListener(\'mousedown\', function(e) {\n  emit(\'mousedown\', {x:e.offsetX,y:e.offsetY})\n});\ncanvas.addEventListener(\'mouseup\', function(e) {\n  emit(\'mouseup\', {x:e.offsetX,y:e.offsetY})\n});\ncanvas.addEventListener(\'click\', function(e) {\n  emit(\'click\', {x:e.offsetX,y:e.offsetY})\n});\n\nvar running = true;\nvar focused = true;\nvar beginTime = performance.now();\nwebkitRequestAnimationFrame(function again(t) {\n  webkitRequestAnimationFrame(again);\n  var dt = (t-beginTime)/1000;\n  beginTime = t;\n  if (running && focused && !document.webkitHidden)\n    emit(\'frame\', dt);\n});\nwindow.parent.addEventListener(\'focus\', function() {\n  focused = true;\n})\nwindow.parent.addEventListener(\'blur\', function() {\n  focused = false;\n})\n\nwindow.pause = function pause() {\n  running = false;\n}\nwindow.play = function play() {\n  running = true;\n}\n\n})();';

  old_ast_json = '';

  old_values_json = '';

  persistent = {};

  window.cm = cm;

  updateIframe = function() {
    var ast_json, newCanvas, newIframe, old_mouse, s, values_json, xfmd, _ref2;
    try {
      xfmd = xform(cm.doc.getValue());
      cm.operation(function() {
        var id, m, val, _i, _len, _ref2, _ref3, _results;
        _ref2 = cm.getAllMarks();
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          m = _ref2[_i];
          m.clear();
        }
        _ref3 = xfmd.values;
        _results = [];
        for (id in _ref3) {
          val = _ref3[id];
          m = cm.markText({
            line: val.loc.start.line - 1,
            ch: val.loc.start.column
          }, {
            line: val.loc.end.line - 1,
            ch: val.loc.end.column
          }, {
            className: 'token',
            inclusiveLeft: true,
            inclusiveRight: true
          });
          _results.push(m.value_id = id);
        }
        return _results;
      });
      ast_json = JSON.stringify(xfmd.ast, function(k, v) {
        if (k === 'loc') {
          return void 0;
        } else {
          return v;
        }
      });
      values_json = JSON.stringify(xfmd.values, function(k, v) {
        if (k === 'loc') {
          return v.start;
        } else {
          return v;
        }
      });
      if (ast_json === old_ast_json && values_json === old_values_json) {
        return;
      }
      old_values_json = values_json;
      old_ast_json = ast_json;
      old_mouse = (_ref2 = iframe.contentWindow.mouse) != null ? _ref2 : {
        x: 250,
        y: 250
      };
      newIframe = document.createElement('iframe');
      iframe.parentNode.replaceChild(newIframe, iframe);
      iframe = newIframe;
      iframe.contentWindow.mouse = old_mouse;
      iframe.style.display = 'none';
      newCanvas = document.createElement('canvas');
      canvas.parentNode.replaceChild(newCanvas, canvas);
      canvas = newCanvas;
      canvas.width = canvas.height = 500;
      iframe.contentWindow.canvas = canvas;
      iframe.contentWindow.persistent = persistent;
      s = iframe.contentDocument.createElement('script');
      s.textContent = preamble + escodegen.generate({
        type: 'Program',
        body: [
          {
            type: 'VariableDeclaration',
            kind: 'var',
            declarations: [
              {
                type: 'VariableDeclarator',
                id: {
                  type: 'Identifier',
                  name: '$values'
                },
                init: {
                  type: 'ObjectExpression',
                  properties: (function() {
                    var _ref3, _results;
                    _ref3 = xfmd.values;
                    _results = [];
                    for (k in _ref3) {
                      v = _ref3[k];
                      _results.push({
                        type: 'Property',
                        key: {
                          type: 'Literal',
                          value: k
                        },
                        value: (v.value >= 0 ? {
                          type: 'Literal',
                          value: v.value
                        } : {
                          type: 'UnaryExpression',
                          operator: '-',
                          argument: {
                            type: 'Literal',
                            value: -v.value
                          }
                        }),
                        kind: 'init'
                      });
                    }
                    return _results;
                  })()
                }
              }
            ]
          }
        ]
      }) + escodegen.generate(xfmd.ast);
      iframe.contentDocument.body.appendChild(s);
    } catch (e) {
      cm.operation(function() {
        var m, _i, _len, _ref3, _results;
        _ref3 = cm.getAllMarks();
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          m = _ref3[_i];
          _results.push(m.clear());
        }
        return _results;
      });
      console.error(e.stack);
    }
  };

  needsUpdate = false;

  setNeedsUpdate = function() {
    if (needsUpdate) {
      return;
    }
    needsUpdate = true;
    return setTimeout(function() {
      window.localStorage['code'] = cm.doc.getValue();
      updateIframe();
      return needsUpdate = false;
    }, 200);
  };

  cm.on('change', function(cm, change) {
    if (cm.scrubbing) {

    } else {
      return setNeedsUpdate();
    }
  });

  if (typeof sharejs !== "undefined" && sharejs !== null) {
    sharejs.open('hello', 'text', function(err, doc) {
      return doc.attach_cm(cm);
    });
  } else {
    cm.doc.setValue((_ref2 = window.localStorage['code']) != null ? _ref2 : 'ctx = canvas.getContext(\'2d\')\nvar particles = [];\n\nfunction update(dt) {\n  for (var i = 0; i < particles.length; i++) {\n    var p = particles[i];\n    p.update(dt);\n  }\n  particles = cull(particles);\n\n  particles.push(new Particle({\n    x: mouse.x+rnd(0),\n    y: mouse.y+rnd(0),\n    vx: rnd(100),\n    vy: rnd(100),\n    size: linear(4+rnd(),17),\n    alpha: linear(0.5, 0),\n    life: 0.4,\n  }));\n}\n\nfunction Particle(opts) {\n  this.t = 0;\n  this.dead = false;\n  for (var k in opts) {\n    if (typeof opts[k] === \'function\') {\n      (function(k) {\n      Object.defineProperty(this, k, {\n        get: function() { return opts[k](this.t/this.life); }\n      })\n      }).call(this, k)\n    }\n    this[k] = opts[k];\n  }\n}\nParticle.prototype.update = function(dt) {\n  this.t += dt;\n  if (this.vx) this.x += this.vx * dt;\n  if (this.vy) this.y += this.vy * dt;\n  if (this.t >= this.life) this.dead = true;\n}\nParticle.prototype.draw = function() {\n  ctx.fillStyle = \'red\'\n  ctx.globalAlpha = this.alpha;\n  ctx.beginPath()\n  ctx.arc(this.x, this.y, this.size, 0, Math.PI*2)\n  ctx.fill()\n}\n\nfunction linear(a,b) {\n  return function(t) { return a*(1-t) + b*t; }\n}\n\nfunction draw() {\n  ctx.clearRect(0,0,canvas.width,canvas.height)\n  for (var i = 0; i < particles.length; i++) {\n    particles[i].draw()\n  }\n}\n\non(\'frame\', function(dt) {\n  update(dt);\n  draw();\n})\n\nfunction rnd(x) { return (x==null?1:x)*(Math.random()*2-1); }\nfunction cull(y) {\n  var x, _i, _len, _results;\n  _results = [];\n  for (_i = 0, _len = y.length; _i < _len; _i++) {\n    x = y[_i];\n    if (!x.dead) {\n      _results.push(x);\n    }\n  }\n  return _results;\n};');
  }

  deltaForNumber = function(n) {
    var firstSig, lastDigit, s, specificity;
    if (n === 0) {
      return 1;
    }
    if (n === 1) {
      return 0.1;
    }
    lastDigit = function(n) {
      return Math.round((n / 10 - Math.floor(n / 10)) * 10);
    };
    firstSig = function(n) {
      var i;
      n = Math.abs(n);
      i = 0;
      while (lastDigit(n) === 0) {
        i++;
        n /= 10;
      }
      return i;
    };
    specificity = function(n) {
      var abs, fraction, s;
      s = 0;
      while (true) {
        abs = Math.abs(n);
        fraction = abs - Math.floor(abs);
        if (fraction < 0.000001) {
          return s;
        }
        s++;
        n = n * 10;
      }
    };
    s = specificity(n);
    if (s > 0) {
      return Math.pow(10, -s);
    } else {
      n = Math.abs(n);
      return Math.pow(10, Math.max(0, firstSig(n) - 1));
    }
  };

}).call(this);
